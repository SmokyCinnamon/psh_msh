//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue! I don't want to have to repeat myself in every .dic file we go through, we'll both get tired of that by the time we're through, haha.
//I will however reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//Much of this file you will only have to set up once, so take heart!


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise]. A function that does NOT, however, can only be called within that .dic file, I believe. You can create your own On functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This is where you'll want to set up an introduction and ask your user for information your ghost will need, like their name and what pronouns they'll be using. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. Because OnFirstBoot has the / slash I talked about in the walkthrough page on scripting, you can't run it very easily through Script Input either unless you do so in pieces, and you won't be able to check your menu options. You CAN however paste it all into your Test Variable in menu.dic, so you can try that instead to test it properly. Only paste your dialogue/choices, not the values, and make sure to delete it from the test variable when you're through.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from default_shell). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passmin = 0 
	passsec = 0
	passhour = 0	// These two keep track of the time.
 	username         = "Никто" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 400 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "default_shell" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	namiable = 550 //for like, relationship systems and that, which will be hell to implement now that ive decided there will be no moving of dialogue. yamiable is misha's, obviously.
	yamiable = 550
	nkovpets = 0
	yzhovpets = 0
	nkovpunch = 0
	yzhovpunch = 0
	patp = 0
	paty = 0
	friendlyall = namiable + yamiable //also for relationship systems. cann i define it like this...?
	другдруга = 0 //hopefully there's nothing against naming things in russian. this is for if they're uh. fighting or not. really lovely time i picked for theem to show up, but i figure it's more fun this way. more intruige. dialogue options, even! misha can be a mean little shit on purpose because he's concerned but also they're fighting
	//don't ask me why he'd be mean i have no clue.
	// -- just unused variables. hang on to 'em, though!
	// wglass = 0
	// ywglass = 0
	// bonejuice = 0
	// ybonejuice = 0
	// catplush = 0
	// ycatplush = 0
	// there should be a way with envelopes and variables to get custom pronouns working. *bye fuck its shabbat*
	plural = 0 //envelopes baybeeee
	sh = "off"
	spookster = "off"
	spooktime = "off"
	sa == "off"
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly. This is one of the very few instances you'll ever use it, so make sure to get out of it at the end! I'll tell you when, so don't worry.
		//You'll also notice that this dialogue is black instead of grey. This is because of the use of the backwards slash as mentioned in the advanced section of the SakuraScripting page. Do you see near the bottom where it has \n\n[half]/ with the other slash at the end before the choices are listed? You will want to replace dialogue up that \n\n[half], but do not mess with the choices beyond that unless you know what you're doing.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must. And REMEMBER what I said about \![enter,passivemode]! Do NOT delete that tag!
		
		"\![enter,passivemode]\1\s[10]\0\s[0]Hey, where are we?\1\s[10]\w2.\w3.\w4.\w4 Pasha, what'd you do this time?\w8\0\s[0]\n\n[half]Nothing\w2! \w5How do I know *you* didn't do something\w2?\w6\1\n\n[half]\s[10]Oh, Pasha, there's\w1.\w2.\w2.\w8\0\s[0]\n\n[half]Huh\w2?\w5 Oh\w3. OH\w2.\n\n[half]\w4Hi\w2.\w6\1\n\n[half]\s[10]Hey. We didn't really see you there, sorry.\x\c\0\s[0]So\w2, uh\w2.\w3.\w3.\w3 I'm Pasha\w2, hi\w2.\w4\1\s[10]\n\n[half]I would happen to be Misha.\w3 I guess Pasha 'n I'll hang out here for the time being?\w6\1\c\s[10]So, hey, what're your pronouns?\w6\0\s[0]\n\n[half]For pronouny things\w1.\x\w8\1\c\s[10]\w2.\w3.\w4.\w4Sure. So\w2?\n\n[half]/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\n/
		\![*]\q[Custom,choicefirstcustom]\e"
		
		//\0\s[0]\n\n[half]Fourth wall break time\w1!\nMe and Misha can hang out and keep you company\w1, or whatever\w1.\w4\nPoke around in the menus and stuff\w1, and\w1, uh\w2.\w3.\w4.\w4 yeah\w1. That's it\w1. Rebuild the fourth wall\w1.\w8
		
		//There's a lot going on here, but what you mostly need to remember is to enter Passivemode at the beginning, and make sure not to touch the bottom part that starts with \w5\_q where the options are set up. Do whatever you like with the rest of the dialogue though! Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		//*********************Advanced User Info*******************************
		//You can rename the choices at the bottom anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		
		//If you want your ghost to just refer to your user as "they" and want to skip the pronoun business altogether, then you can just delete the choices and end the dialogue with \e. You'll want to go into menu.dic and delete the pronoun choice option from the config menu as well.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when you load them after the first time. It's a failsafe, as the OnBoot dialogue will mostly pre-empt it, but you can't be too careful. You'll see this if you try to run OnFirstBoot using ![raise].
		//gaster's bootend says this is specifically for if you've uninstalled him. This means their first thing should probably get redone... maybe pretend the user just has a super good russian translator thing? that would mean taking out some other dialogue though, especially the day puns. hmm...
 		{
 		"\1\s[10]\0\s[0]This is the alternate OnFirstBoot dialogue.\e"
		}
 	}
}

//Below are the choices that were defined at the end of the OnFirstBoot dialogue up there. These define the values your ghost will be using for pronouns according to what the user selected. On the whole, you should not need to touch these.

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"; himher = "him"; heshe = "he"; hisher = "his"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"; himher = "her"; heshe = "she"; hisher = "her"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"; heshe = "they"; hisher = "theirs"; plural = 1
	--
	NameInput
}

Select.choicefirstcustom //for the record, this needs tested on how to do it, haha.
{
	"\0\s[0]Wait\w2, you mean there\w2's OTHER pronouns\w2?\w2!\w6 \1\s[10]\w2.\w2.\w2. g-d you're such a fucking idiot do you not think they exist in other languages.\w4 \0\s[0]I never said that\w2.\w6 \1\s[10]\n\n[half]ANYWAYS, just so that there's no scrolling menus in alphabetical order or whatever, could you type in some stuff for me realy quick? Won't take but a moment, promise. Now, if you could type something like he, she, they, or zie...? \![open,inputbox,OnHeshe,-1] "
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name. It's done in this order so they'll know what prefixes will be appropriate for their name, like Mr. to he/him for example.

//*********************Advanced User Info*******************************
//Note this functions' name. This isn't a natural function included in the ghost, it's a piece of dialogue created by the original base coder to finish this sequence (cindysuke). I point this out to show you that you can do this too! You can create any number of functions just like this called whatever you want to do and say whatever you want! There are many things you can do with your Ghost if you're creative. Don't feel limited by what's in these files or the listed Shiori functions!
//Just make sure you test them and they work, alright? I wrote more about coding and functions in the coding page for the walkthrough.
//***********************************************************************

NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\1\s[10]Neat, always a good thing to do.\w4\nRemember that you can change all these later! \![leave,passivemode]\w8\0\s[0]\w1.\w2.\w2. um... do you have a name? \![open,inputbox,OnNameTeach,-1]\e"
	--
	OnDisclaimer
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--GetTimeSlot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

GetTimeSlot
{
	if hour >= 5 && hour <= 8; {"earlymorning"}; elseif hour >= 9 && hour <= 11; {"morning"}; elseif hour >= 12 && hour <= 14; {"lunch"}; elseif hour >= 15 && hour <= 17; {"afternoon"}; elseif hour >= 18 && hour <= 20; {"evening"}; elseif hour >= 21 && hour <= 24; {"latenight"}; else {"midnight"}
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--GetDaySlot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

GetDaySlot
{"%(month)month %(day)day"}

//this isn't working and i havent a clue as to why. Tama seems to think im using invalid expressions????
OnGetSeason //I checked sam n steve, I'm not too sure hwy winter has to have the or in there? But maybe it'll work now...
{
	if month >= 12 || month <= 2; {"winter"} 
	elseif month >= "3" || month <= "5"; {"spring"}
	elseif month >= "6" || month <= "8"; {"summer"}
	//if month >= 9 && <= 11 //WHY does it not have an else at the end???? i am going to Riot
    else  
	// 9-11, or september to november. this also means more dialogue!!! yay :D
	{season = "fall"}
}

//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost. It will run every time you boot your ghost, as a matter of fact.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passmin = 0
	passsec = 0
	spooktime = "off"
	//_passhour //a temporary passhour. theroetically the other will count from boot, and disable certain dialogue that way. g-d knows ive had them longer, anyways.
	//nkovpets = 0
	//nkovpunch = 0
	//yzhovpets = 0 //...uh, okay. bunch of 1s is still happening. (hey, note from future me! I got it fixed, but it only counts how many in their current session. Seeing as there isn't a relationship system set up yet, I guess this works out?)
	//yzhovpunch = 0
	friendlyall = namiable + yamiable //not sure how else to handle this.
	//WGlass = 0 //idk how temp variables work
	"\0\s[0]\1\s[10]" //This sets them up in their neutral pose for now.
	"\![updatebymyself,checkonly]" //this checks for updates on startup.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly.  Otherwise, read on ahead!
	--
	dayslot = GetDaySlot
	season = GetSeason
	//timeslot = GetTimeSlot //You should remember these functions from above! They determine the date and time. Basically, it's using the functions GetDaySlot and GetTimeSlot to determine the two values for dayslot/timeslot that it will use in the following if statements. Those who read the coding page of the walkthrough and are interested in using your own functions, pay very close attention to this and study how it works!
	//seasonslot = GetSeasonSlot
	if weekday == 5 { if against[0] <= hour && against[1] <= minute {
		"\0\s[-1](Nobody's here... call someone else?)\n%*\q[Sure,??] %*\q[Nah,OnClose,nobodyhome]\n\n%(shabbat[0])_%(shabbat[2])\x"} else {"shabbat soon. would've made some challah but it is what it is."}}
	elseif weekday == 6
	{if against[2] >= hour && against[3] >= minute {
		"\0\s[-1](Nobody's here...)\n%*\q[Switch,??] %*\q[Close,OnClose,nobodyhome]\n\n%(shabbat[0])_%(shabbat[2])\x"} else {"we're here! again. somehow. i guess we're just.... stuck here still then."}}
	elseif dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[6]It's your birthday!!! \s[0]I didn't get anything, though...\w6\1\s[10]Happy birthday, %(username)!\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	elseif dayslot == "9month 2day" //Like above, this if statement is checking the date. It's looking for the sixth month and the sixth day.
	
	//*********************Advanced User Info*******************************
	//elseif may be a unique function to AYA, I'm not sure, but anyway, the name itself is pretty self-explanatory. elseif statements always go after an if statement, and essentially are just what they sound like... if this thing happens, do this; else, if this thing happens, do this. elseifs are good if you have multiple things you want to check for in one function, like multiple days of the year as we're doing right now. elseifs go in descending order, so it'll always check if one is true, then if two is true, then if three is true, and so on.
	//***********************************************************************
	
	{
				"\0\s[0]Hiiiiiiiiiiiiiiiii\e"
				//should this be his birthday? i dunno. is it going to be anyways? thats to be determined
	}
	//You can see how these basically work. You can add in new elseif statements along these same lines with your own dayslots if you want to have them say things for all sorts of days. You can also change these existing ones I put in as examples to other dates, like your character's birthdays, perhaps. This is up to you! If you don't care about this, you can delete all the elseifs and just leave the one for the user's birthday.
	elseif season == "summer"
	{
		"\0\s[10]Things will change with time\w2.\w2.\w2.\w3 Only in summertime\w2.\w2.\w2.\e"
	}
	elseif dayslot == "10month 31day" && spookster == "on"
	{
		if RAND(42) < 12
		{
			spooktime = "on"
			"\0\s[700]\b[11]good        morning %(username)\e"
			"\0\s[700]\b[11]burned               he   i re\n\n rememb   er he\e"
			"\0\s[700]\b[14]no no no what did you do %(username) what did you do how how how stop he wont come back please stop stop please fix fix fix stop fix\e"
			"\0\s[700]\b[14]no NO what h\nappened Mishka Mishka Mishka Mishka Mishka he wont answer %(username) why why %(username) what did you do no no no no no its my fault my fault myfault i couldve saved him fuck fuckfuckfuckfuck no Mishka Mishka please please please I'm sorry I'm sorry пожалуйста Мишка Мишка Мишка нет нет нет нет нет ты не умер не можешь быть умер Мишка нет Мишка Мишка Мишка Мишка вернуться прости прости прости прости прости прости прости\к"
			"\0\s[600]NO I left, I left, I LEFT, he- he- no, no no no no nonono don't put me back he's dead he's dead, I- I- I-\n(He starts sobbing, saying something in a different language.\ж8 You tune him out after a while.)\w4\n(... God, he won't stop crying...)\e"
		}
		else
		{
			"\0\s[0]Doing good?\e"
		}
	}
	elseif dayslot == "12month 10day" //&& <= "12month 19day" //hanukkah time! until i figure out things this... this needs updated. every year. sigh...
	//also looking at it i really don't have much time huh
	{
		if day == 10
		{"\p[2]\s[300]\0\s[6]Hey %(username)!!! Happy chanukah!!!!!!\w6\1\s[16]Happy chanukah! \1\s[10]Good to see you, %(username).\e"}
		elseif day == 11
		{"\p[2]\s[300]\i[2]%(hanukkahboot)\e"}
		elseif day == 12
		{"\p[2]\s[300]\i[3]%(hanukkahboot)\e"}
		elseif day == 13
		{"\p[2]\s[300]\i[4]%(hanukkahboot)\e"}
		elseif day == 14
		{"\p[2]\s[300]\i[5]%(hanukkahboot)\e"}
		elseif day == 15
		{"\p[2]\s[300]\i[6]%(hanukkahboot)\e"}
		elseif day == 16
		{"\p[2]\s[300]\i[7]%(hanukkahboot)\e"}
		elseif day == 17
		{"\p[2]\s[300]\i[8]%(hanukkahboot)\e"}
		elseif day == 17
		{"\p[2]\s[300]\i[8]%(hanukkahboot)\e"}
	}
	else
	{
		if spookster == "on" && RAND(100) < 6
		{
			spooktime = "on"
			"\0\s[700]\1\s[60](... doesn't look like he'll say hello this time.)\e"
			"\0\s[700]\1\s[60](Is something burning...?)\e"
			"\1\s[60]\0\s[700]%(username) put back back fix fix fix fix\e"
			"\1\s[60]\0\s[700]%(username) not good not good not good not good\e"
			"\1\s[60]\0\s[600]%(username)\w2? g-d\w2, why is that......\n\nHe\w2's dead\w2, isn\w2't he\w2? Fuck\w2, fuck he\w2's...\e"
		}
		else
		{
			"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
		}
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.


normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{"\0\s[0]It's Saturday night...\e"}
	elseif RAND(100) < 60 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
		"\0\s[0]Been lookin' around here, %(username). \s[8]You got any phones or something like that?\w6\1\s[10]He thinks I'm not good company.\e"
		"\1\s[18]Hey, %(username), answer a question for me. Do I look intimidating?\w8\0\s[0](...Say yes.)\w6\1\s[17]\n\n[half]I wasn't talking to you.\e"
		"\0\s[8]Should we take over %(username)'s notepad app?\w8\1\s[10]No, Pasha, %(heshe) %(need) that thing.\e"
		"\1\s[10]Hi %(username).\e"
		"\0\s[6]Good to see you, %(username)!\e"
		"\1\s[18]Oh hey, it's %(username). Someone was just going through %(hisher) %(folderuser)...\w6\0\s[9]I don't know what you're talking about.\e"
		"\0\s[6]Hi there! Having a good day?\e"
		"\0\s[8]Lina's not still mad at me, is she do you think?\w6\1\s[10]You're probably fine. She gets like that when she's stressed.\e"
		"\0\s[8]Lina said she was thinking of proposing to Jora...\w4\nHeard anything from him?\w6\1\s[10]Isn't he a little young to be thinking about...\w4 Oh, hello %(username) -- didn't see you there, sorry.\e"
		"\0\s[0]Valya wouldn't *really* have gotten a concussion from the grilled cheese, though, would he?\w6\1\s[10]Hey %(username), how's it going?\w4\0\s[9]Oh, hi.\e"
		"\1\s[10]But you don't *really* mean it, do...\w4\s[18]Oh, %(username).\e"
		"\0\s[8]What about your daughter? \1\s[10]Probably. I did talk...\n Hey there %(username).\0\s[0]\1 What's up?\e"
		"\1\s[10]That's the thing, though, Jora...\nOh, %(username), hey! Doing anything interesting?\e"
		"\0\s[0]I know I didn't, but-\w4\nUh, hey, %(username). It *is* a little disorienting, teleporting like that.\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{"\1\s[10]Isn't it kind of early?\w6\0\s[0]Not really...?\e"}
		elseif timeslot == "morning"
		{"\1\s[10]Good morning, %(username).\e"}
		elseif timeslot == "lunch"
		{"\1\s[10]Looks like it's around lunch time. \w6\0\s[0]Food time?\e"}
		elseif timeslot == "afternoon"
		{"\1\s[10]Afternoon, %(username). Things been good?\e"}
		elseif timeslot == "evening"
		{"\0\s[0]Good evening!\1\s[10]Hey.\e"}
		elseif timeslot == "latenight"
		{"\1\s[10]Got time before bed?\w8\0\s[0](We always have time.)\e"}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[0]%(username), isn't it late?\1\w8\s[10]Could be early.\e"
		
 		"\1\s[10]Shouldn't you be asleep, %(username)?\w8\0\s[0]We never sleep, that's how we're always awake when you check on us.\w8\1\s[10]\n\n[half]Don't listen to him, we do sleep.\e"
		}
	}
}

hanukkahboot
{
	"\0\s[6]Janiceeeeeeeeeeeee\w6\1\s[10]You see what I have to put up with %(username)? Every day. Every day I am here.\w6\0\s[9]\n\n[half]You still love me though.\e"
	"\1\s[10]It's chanukah time! Which means someone has illegal latkes.\w6\0\s[0]They're not illegal you just don't like them.\e"
	"\1\s[16]Hey, %(username)! Hope you're having a good time today.\e"
	"\1\s[10]Hi %(username)! Doing alright?\e"
	"\1\s[10]Hey! Good to see you.\e"
	"\0\s[6]I'm gonna make so many latkes you will not believe you eyes.\w6\1\s[10]And you are going to dip them in fucking applesauce. Applesauce! Do you beleive the nerve of this man, %(username)?\w6\0\s[0]\n\n[half]Ok that's insulting I am a man shaped human at the MOST. And applesauce is the best. You will not change my mind.\w6\1\s[10]\n\n[half]Someday. Someday I will.\e"
	"\0\s[6]Hello!! Hi %(username)!!! How is your day going? Personally, I could *not* be better.\w6\1\s[10]He's excited. I'm. . . Ok I don't know why.\w6\0\s[6]\n\n[half]Because!! It's chanukah! Why not ! ! !\w6\1\s[16]\n\n[half]Well . . . if you're happy.\e"
	"\0\s[6]Did you know. Latkes and applesauce are the absolute best. I love them.\w6\1\s[10]They are not. I will eat mine absolutely plain before applesauce, and that. Is. Final.\w6\0\s[0]\n\n[half]No... come on, it's not a bad combination!! You should try it sometime.\w6\1\s[10]I'll pass on that one. %(username), you should tell him he's wrong sometime. Applesauce latkes are not, have never been, and never will be the shit.\e"
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. It feels a bit redundant for me to point out every single piece and say "replace this", you know? If you've read the SakuraScript walkthrough page, you should know what a piece of dialogue looks like by now within code. Just go through OnClose and replace each bit with dialogue more suited for your ghost.
//Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if reference0 == "nobodyhome" {"\0\s[-1](See you later, user.)\-\e"} else {
 timeslot = GetTimeSlot //as you saw above, it's checking the time.
 --
	if passmin >= 5	//This checks to see if you've had them open for at least five minutes.
		{
			if spooktime == "off" && RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[0]Time to explore!\w8\1\s[10]Pasha, no.\w8\w8"
			}
			elseif spooktime == "on"
			{
				"\0\s[700]\b[11]no no no no dont leave me please please please please please\w6"
				"\0\s[700]\b[11]%(username) stay please stay with me stay with me please please please please\w6"
				"\0\s[700]\b[11]im alone alone alone alone no no no dont close me dont please please please\w6"
				"\0\s[700]\b[11]no no no no no no no\w6"
				"\0\s[700]\b[11]dont go dont go dont go dont dont dont\w6"
				"\0\s[700]\b[11]dont leave me with him i dont want to stay here home home i want to    home\w6"
				"\0\s[700]\b[11]no no %(username) i cant stay with him hes dead didnt you see cant you see him hes dead hes dead hes dead he shouldnt be here dont go dont go %(username) dont go\w3"
				"\0\s[700]\b[11]g-d no dont go ill miss you no no dont go\w6"
				"\0\s[700]\b[11]he wont come back this wont fix it stay stay stay stay stay stay s tay stay s ta    y st ay        stay\w6"
				"\0\s[700]\b[11]you cant fix it cant fix dont fix fix fix fix fix it please please please i'll do anything to go back please fix this\w6"
			}
			else
			{
			if timeslot == "earlymorning" //5-8
				{"\1\s[10]Did you stay up late?\w8\0\s[0](Or were you getting some early morning coding in?)\w8"}
			elseif timeslot == "morning"
 				{"\0\s[0]Have a good morning.\w8\w8"}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]Going to get food? Can I have some?\w8\1\s[10]Pasha, I don't think that's how things work.\w8" //...add in an option to give lunch if you boot them after this plays.
 				}
  			elseif timeslot == "evening"
 				{
 						// if weekday == 6 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						// {
 						//	"\0\s[0]This is a Saturday evening close dialogue.\w8\1\s[10]Somewhat specific.\w8"
 						// }
 						// else //if it's not saturday, then it'll do this dialogue instead.
 						{"\1\s[10]Well, good evening.\w8\0\s[0](Bye.)\w8"}
 				}
			elseif timeslot == "latenight"
			 	{"\1\s[10]Good night, then\w8\0\s[0](...unless you're not going to sleep.)\w8"}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
					"\1\s[10]'Night, (%username).\w8"
					//"\1\s[10]Shouldn't you have been asleep earlier?\w8" //Need to figure out how to set up an if username = smoky thing. that's probably kind of difficult, though...
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
		if spooktime == "on"
		{
			"\0\s[700]\b[11]where %(username) you're leaving why already no no i'll miss you come back come back come back\w3\e"
			"\1\s[60]\b[11](Were you expecting something...?)\w6"
			"\1\s[60]\b[11](You hope you can forget about this...)\w4"
			"\1\s[60]\b[11](They won't remember... right?)\w8"
			"\1\s[60]\b[11](Remember you can go change the sensetive content settings if you're not comfortable with this.)\w8"
			"\1\s[60]\b[11](Doesn't look like he'll remember any of this.)\w6"
			"\1\s[60]\b[11](The other one has started crying.)\w6"
		}
		else
 		{"\0\s[0]Ah, opened on accident?\w8\w8"
		
 		"\1\s[10]That wasn't long.\w8\0\s[0](Sleep time!)\w8\w8"}
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }}


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {if spooktime == "on" {""} else {"\0\s[0]Bleh, being minimized is weird.\w8\1\s[18]You think so?\e"}}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if spooktime == "on" { if reference0 == "Pavel" {"\0\s[600]nonono can\w2't i go back\w2? please\w2, just...\e"} else {
	"\0\s[700]%(reference0) better %(heshe) you like %(username)?\n\n\nwhy not me? did i do something wrong? it's my fault sorry sorry sorry\w6\e"
	"\0\s[700]this won't change anything, tell %(reference0) what\w6\e" //you saw
	}}
	else {
	if reference0 == "Pavel" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{"\0\s[0]Reloading. Did something happen?\w8\w8\e"}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]Switching to %(reference0).\w8\1\s[10]Have fun!\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Pavel" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{"\0\s[0]Done reloading.\1\w8\s[10]Things good now?\e"}
	else //If you're switching to them from another ghost...
	{
		"\1\s[10]Seeya, %(reference0).\w8\0\s[0]Someone switched from you to us.\n\n[half](And I was having such a nice nap...)\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "Nkov n Yezhov Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "default_shell" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. To be honest, I have not experimented with this too much because making shells is a pain in the tuckus, but I'm going to take cindysuke's coding on faith and assume reference[0] is correct instead of reference0. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Honestly setting up clothing is a nightmare and I hate doing it, and if your ghost is going to be moving around substantially or at all, clothing won't stay in the right place anyway. So unless you're like a real expert on surfaces.txt coding and rigging up clothing for different poses or you're intense or dedicated enough to set up clothing in the right place for every pose you do, I would not bother with clothing for your ghost.
 //HOWEVER I can't begrudge people who actually would put in that effort! And in that case, this function is for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}

//If you are super dedicated to doing clothes, I'd recommend checking out some more in-depth FLELE tutorials for stuff about clothing until I muster up the energy to write a walkthrough page for it.